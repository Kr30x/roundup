// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  squads        SquadMember[]
  expenses      Expense[]
  splits        Split[]
  balancesOwed   Balance[] @relation("OwedBy")
  balancesOwedTo Balance[] @relation("OwedTo")
}

model Squad {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     SquadMember[]
  expenses    Expense[]
  inviteCodes InviteCode[]
  balances    Balance[]
}

model SquadMember {
  id        String   @id @default(cuid())
  userId    String
  squadId   String
  role      String   @default("MEMBER") // ADMIN or MEMBER
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  squad     Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)

  @@unique([userId, squadId])
}

model InviteCode {
  id        String   @id @default(cuid())
  code      String   @unique
  squadId   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  squad     Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime @default(now())
  paidById    String
  squadId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paidBy      User     @relation(fields: [paidById], references: [id])
  squad       Squad    @relation(fields: [squadId], references: [id])
  splits      Split[]
}

model Split {
  id         String   @id @default(cuid())
  expenseId  String
  userId     String
  amount     Float
  settled    Boolean  @default(false)
  settledAt  DateTime?
  expense    Expense  @relation(fields: [expenseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Balance {
  id          String   @id @default(cuid())
  squadId     String
  fromUserId  String
  toUserId    String
  amount      Float
  updatedAt   DateTime @updatedAt
  squad       Squad    @relation(fields: [squadId], references: [id], onDelete: Cascade)
  fromUser    User     @relation("OwedBy", fields: [fromUserId], references: [id])
  toUser      User     @relation("OwedTo", fields: [toUserId], references: [id])

  @@unique([squadId, fromUserId, toUserId])
}
